class Solution {
    HashMap<Integer,Integer> map=new HashMap<>();
    public int sum(TreeNode root){
        if(root==null)
            return 0;
        int left=sum(root.left);
        int right=sum(root.right);
        int total=root.val+left+right;
        if(map.containsKey(total))
            map.put(total,map.get(total)+1);
        else
            map.put(total,1);
        return total;
    }
    public int[] findFrequentTreeSum(TreeNode root) {
        int s=sum(root);
        int max=0;
        int c=0;
        for(Map.Entry<Integer,Integer> e:map.entrySet()){
            if(e.getValue()>max){
                max=e.getValue();
                c=1;
            }
            else if(e.getValue()==max){
                c++;
            }
        }
        int ans[]=new int[c];
        int k=0;
        for(Map.Entry<Integer,Integer> e:map.entrySet()){
            if(e.getValue()==max)
                ans[k++]=e.getKey();
        }
        return ans;
    }
}




Reference : https://leetcode.com/problems/most-frequent-subtree-sum/
